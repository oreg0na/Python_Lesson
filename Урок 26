# _*_ coding: utf-8 -*-
import random
import os
import jsonpickle
import sqlite3


class FileProvider:
    def get(self, path):
        file = open(path, 'r')
        data = file.read()
        file.close()
        return data

    def append(self, path, data):
        file = open(path, 'a')
        data = file.write(data)
        file.close()

    def writelines(self, path, data):
        file = open(path, 'w')
        data = file.write(data)
        file.close()

    def exists(self, path):
        return os.path.exists(path)

    def clear(self, path):
        file = open(path, 'w')
        file.write("")
        file.close()

connection = sqlite3.connect('MyTester.db')
connection2 = sqlite3.connect('MyResult.db')
file_provider = FileProvider()


class Question:
    def __init__(self, text, answer):
        self.text = text
        self.answer = answer


class QuestionStrorage:
    def __init__(self, connection):
        self.connection = connection

        cursor = connection.cursor()

        cursor.execute('''SELECT count(name) FROM sqlite_master WHERE type = 'table' AND name = 'questions' ''')

        if cursor.fetchone()[0] == 0:
            cursor.execute("""CREATE TABLE questions(Text TEXT PRIMARY KEY, Answer INTEGER);""")
            connection.commit()
            questions = [
                Question('Сколько будет 2 + 2 * 2', 6),
                Question('Бревно надо распелить на 10 частей, сколько нужно пилов', 9),
                Question('На 2х руках 10 пальце, сколько на 5', 25),
                Question('укол делают каждые пол часа, сколько нужно минут для 3х уколов', 60),
                Question('5 свечей горело, 2 потухли. Сколько свечей осталось', 2)
            ]
            self.safe_questions(questions)


    def get_all(self):
        cursor = self.connection.cursor()

        cursor.execute("SELECT * FROM questions;")
        all_result = cursor.fetchall()

        questions = []

        for result in all_result:
            question = Question(result[0], result[1])
            questions.append(question)
        return questions

    def safe_questions(self, questions):
        for question in questions:
            self.add_question(question)

    def add_question(self, question):
        query = f"""INSERT INTO questions (Text, Answer) VALUES('{question.text}', '{question.answer}');"""

        cursor = self.connection.cursor()
        cursor.execute(query)
        self.connection.commit()


    def remove(self, index):
        questions = self.get_all()
        question_for_delete = questions.pop(index)
        query = f"""DELETE FROM questions WHERE Text = '{question_for_delete.text}';"""

        cursor = self.connection.cursor()
        cursor.execute(query)
        self.connection.commit()


qs = QuestionStrorage(connection)


class User:
    def __init__(self, name, count_right_answers=0, result='Неизвестно'):
        self.name = name
        self.count_right_answers = count_right_answers
        self.result = result

    def inc_righta_answer(self):
        self.count_right_answers += 1

    def calculate_result(self, count_questions):
        right_answers_percents = self.count_right_answers * 100 // count_questions
        results = ['Идиот', 'Кретин', 'Дурак', 'Нормальный', 'Талант', 'Гений']
        self.result = results[right_answers_percents // 20]
        return self.result


class UsersResultStorage:
    def __init__(self, connection):
        self.connection = connection

        cursor = connection.cursor()

        cursor.execute('''SELECT count(name) FROM sqlite_master WHERE type = 'table' AND name = 'user_results' ''')

        if cursor.fetchone()[0] == 0:
            cursor.execute("""CREATE TABLE user_results(Text TEXT PRIMARY KEY, CountRA INTEGER, Result Text);""")
            connection.commit()
            users_result = []
            self.safe(users_result)

    def get_all(self):
        cursor = self.connection.cursor()

        cursor.execute("SELECT * FROM user_results;")
        all_result = cursor.fetchall()

        users_result = []

        for user in all_result:
            user = User(user[0], user[1], user[2])
            users_result.append(user)
        return users_result

    def safe(self, users_result):
        for user in users_result:
            self.add_user(user)

    def add_user(self, user):
        query = f"""INSERT INTO user_results (Text, CountRA, Result) VALUES('{user.name}', '{user.count_right_answers}', '{user.result}');"""

        cursor = self.connection.cursor()
        cursor.execute(query)
        self.connection.commit()

def show_user_results(table_result):
    if table_result.lower() == 'y':
        name = 'Имя'
        count_right_answers = 'Кол-во правильных ответов'
        result = 'Результат'
        print(f'{name:15}{count_right_answers:30}{result:15}')

        users_list = user_result.get_all()
        for player in users_list:
            print(f'{player.name:15}{player.count_right_answers:30}{player.result:15}')


def add_new_question():
    text = input('Введите текст вопроса \n')
    answer = int(input('Введите ответ \n'))
    new_question = Question(text, answer)
    qs.add_question(new_question)


def remove_question():
    question = qs.get_all()
    while True:
        print('Введите номер вопроса который надо удалить')
        for i in range(len(question)):
            print(f'{i + 1}.{question[i].text}')
        user_answer = int(input())
        if user_answer < 1 or user_answer > len(question):
            continue
        qs.remove(user_answer - 1)
        print(f'Вопрос под номером {user_answer} удален')
        break


user_result = UsersResultStorage(connection2)

jsonpickle.set_encoder_options('json', indent=4, separators=(',', ': '), ensure_ascii=False)
while True:
    questions = qs.get_all()
    user = User(input('Как вас зовут? '))

    count_questions = len(questions)
    for i in range(len(questions)):
        print(f'Вопрос №{i + 1}')
        random_index = random.randint(0, len(questions) - 1)
        print(questions[random_index].text)
        while True:
            user_answer = input()
            if user_answer.isdigit():
                pass
            else:
                print('Пожалуйста введите число')
                continue
            break
        right_answer = questions[random_index].answer
        if int(user_answer) == right_answer:
            user.inc_righta_answer()
        questions.pop(random_index)

    user.calculate_result(count_questions)

    print('Количество правильных ответов =', user.count_right_answers)
    print(f'{user.name}, -колличество правильных ответов: , {user.result}')
    user_result.add_user(user)

    user_question = input('Хотите добавить новый вопрос? ')
    if user_question.lower() == 'y':
        add_new_question()

    user_question = input('Хотите удалить вопрос? ')
    if user_question.lower() == 'y':
        remove_question()

    continue_game = input('Повторим? y/n ')
    if (continue_game.lower() == 'y'):
        continue
    else:
        break

table_result = input('Вывести таблицу результатов? y/n ')
show_user_results(table_result)
